{-# OPTIONS --type-in-type #-}

module Data.Functor.Coyoneda where

open import Prelude

private
  variable
    a b : Set
    f g : Set -> Set

-- This is the existensial version Yoneda f a.
data Coyoneda (f : Set -> Set) (a : Set) : Set where
  Coyoneda: : f b -> (b -> a) -> Coyoneda f a

instance
  Functor-Coyoneda : Functor (Coyoneda f)
  Functor-Coyoneda .map f (Coyoneda: x g) = Coyoneda: x (f <<< g)

-- The coYoneda lemma states that f a ~= Coyoneda f a. The isomorphsim
-- is witnessed by lower and lift.
lowerCoyoneda : {{_ : Functor f}} -> Coyoneda f a -> f a
lowerCoyoneda (Coyoneda: x f) = map f x

liftCoyoneda : f a -> Coyoneda f a
liftCoyoneda y = Coyoneda: y id

-- It turns out that Coyoneda is a free construction, i.e. Coyoneda f is
-- the free functor generated by f. This is the right adjunct of the
-- corresponding free/forgetful adjunction.
interpretCoyoneda : {{_ : Functor g}}
  -> (forall {a} -> f a -> g a) -> Coyoneda f b -> g b
interpretCoyoneda t (Coyoneda: x f) = map f (t x)

-- This is the left adjunct.
uninterpretCoyoneda : (forall {a} -> Coyoneda f a -> g a) -> f b -> g b
uninterpretCoyoneda t x = t (liftCoyoneda x)
