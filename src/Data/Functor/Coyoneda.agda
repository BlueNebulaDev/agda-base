{-# OPTIONS --type-in-type #-}

module Data.Functor.Coyoneda where

open import Prelude

private
  variable
    A B : Set
    F G : Set -> Set

-- This is the existensial version Yoneda F A.
data Coyoneda (F : Set -> Set) (B : Set) : Set where
  Coyoneda: : F A -> (A -> B) -> Coyoneda F B

-- Coyoneda C F is a functor.
instance
  functorCoyoneda : Functor (Coyoneda F)
  functorCoyoneda .map f (Coyoneda: x g) = Coyoneda: x (f <<< g)

-- The coYoneda lemma states that F B ~= Coyoneda C F Y. The isomorphsim
-- is witnessed by lower and lift.
lower : {{_ : Functor F}} -> Coyoneda F A -> F A
lower (Coyoneda: x f) = map f x

lift : F A -> Coyoneda F A
lift y = Coyoneda: y id

-- It turns out that Coyoneda is a free construction, i.e. Coyoneda C F is
-- the free functor generated by F. This is the right adjunct of the
-- corresponding free/forgetful adjunction.
interpret : {{_ : Functor G}} -> (F ~> G) -> Coyoneda F ~> G
interpret t (Coyoneda: x f) = map f (t x)

-- This is the left adjunct.
uninterpret :  (Coyoneda F ~> G) -> F ~> G
uninterpret t x = t (lift x)
