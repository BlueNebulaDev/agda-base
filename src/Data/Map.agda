{-# OPTIONS --type-in-type #-}

module Data.Map where

-------------------------------------------------------------------------------
-- Imports
-------------------------------------------------------------------------------

open import Prelude

open import Data.Foldable
open import Data.Tree.Balanced.TwoThree as Tree using (Tree)

-------------------------------------------------------------------------------
-- Variables
-------------------------------------------------------------------------------

private
  variable
    k v : Set

-------------------------------------------------------------------------------
-- Map
-------------------------------------------------------------------------------

private
  data Map' (k v : Set) : Set where
    Map: : Tree (k * v) -> Map' k v

Map = Map'

-------------------------------------------------------------------------------
-- Construction
-------------------------------------------------------------------------------

empty : Map k v
empty = Map: Tree.empty

singleton : k -> v -> Map k v
singleton k v = Map: $ Tree.singleton (k , v)

-------------------------------------------------------------------------------
-- Destruction
-------------------------------------------------------------------------------

keys : Map k v -> List k
keys (Map: t) = foldMap (fst >>> [_]) t

elems : Map k v -> List v
elems (Map: t) = foldMap (snd >>> [_]) t
