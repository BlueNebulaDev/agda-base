{-# OPTIONS --type-in-type #-}

module Data.Subset where

-------------------------------------------------------------------------------
-- Imports
-------------------------------------------------------------------------------

open import Prelude

open import Data.Foldable

-------------------------------------------------------------------------------
-- Variables
-------------------------------------------------------------------------------

private
  variable
    a : Set

-------------------------------------------------------------------------------
-- Subset
-------------------------------------------------------------------------------

abstract
  Subset : Set -> Set
  Subset a = List a

-------------------------------------------------------------------------------
-- Construction
-------------------------------------------------------------------------------

  nil : Subset a
  nil = []

  singleton : a -> Subset a
  singleton a = [ a ]

-------------------------------------------------------------------------------
-- Destruction
-------------------------------------------------------------------------------

  elems : Subset a -> List a
  elems = id

-------------------------------------------------------------------------------
-- Inserting
-------------------------------------------------------------------------------

  insert : {{_ : Eq a}} -> a -> Subset a -> Subset a
  insert a [] = singleton a
  insert a (h :: t) = if h == a then h :: t else h :: insert a t

-------------------------------------------------------------------------------
-- Deleting
-------------------------------------------------------------------------------

  delete : {{_ : Eq a}} -> a -> Subset a -> Subset a
  delete _ [] = []
  delete a (h :: t) = if h == a then t else delete a t

-------------------------------------------------------------------------------
-- Querying
-------------------------------------------------------------------------------

  member : {{_ : Eq a}} -> a -> Subset a -> Bool
  member _ [] = False
  member a (h :: t) = if h == a then True else member a t

-------------------------------------------------------------------------------
-- Instances
-------------------------------------------------------------------------------

  instance
    Functor-Subset : Functor Subset
    Functor-Subset .map = map {{Functor-List}}

    Foldable-Subset : Foldable Subset
    Foldable-Subset .foldMap = foldMap {{Foldable-List}}
